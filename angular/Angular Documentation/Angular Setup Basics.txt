* Angular Basics
- To create a new angular project: ng new <app_name-NO_spaces in name> --no-strict --standalone false --routing false
- Navigate inside the folder created and start the development server by the command: ng serve
- To include bootstrap in the project, first install bootstrap using npm install --save bootstrap@3; and then add the path to the folder in angular.json file of the project.
- To create components with the CLI use the command: ng generate component name_of_the_component; for example = ng generate component server, where server is the component name.
- To create components with the CLI use the shortcut command: ng g c server.
- To register new component in the module, you need to add the component name in the declarations array, only then Angular will be aware of the new component added. 
- Data Binding:
    - String Interpolation {{}} --> example: {{ propertName }} 
    - Property Binding [] --> example: [disabled]="propertName"
    - Event Binding () --> example: (click)="propertyName/methodName()/expression"
        - In Event Binding you can also pass a special reserved varaible name '$event' as an argument to the method that the event is being binded on, and this special key will read, capture and hold the data of that particular event which can then be used/passed elsewhere.
    - 2 way Binding [()] --> example: [(ngModel)]="propertyName"
- Directives are the instructions in the DOM.
    - *ngIf="propertName/methodName()/Expression" - A structural directive meaning that the element will not be there until and unless the expression is not met.
    - [ngStyle]="{key:value}" - Attribute directive where key is the style name and the value is the a typescriptProperty/typescriptMethod evaluating to a style. It will change the CSS Style dynamically.
    - [ngClass]="{key:value}" - Attribute directive where key is the class name and the value is the condition determining whether this class should be attached or not. It will add/remove the CSS Class dynamically.
    - *ngFor="let x of typescriptProperty" - structural directive
        - if you want to get the index then *ngFor="let x of typescriptProperty; let i = index" - here you can fetch the index number of the Array.
- Binding to Custom properties 
    - @Input() : If you want to allow parent component to be able to bind to a property from its child component then you need to use this decorator in front of the child components property.
        1. So now any component that is hosting this child component via the selector will now be able to bind to that property. 
        2. If you want to assign an Alias to the custom property that your are binding to; then you need to pass an argument enclosed in quotation marks with the newName that you want to use to call in the other (parent) component. Example: @Input('newName')
- Binding to Custom events: Look at video 71 Section 5 for details.
